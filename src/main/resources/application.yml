#服务器相关配置
server:
  port: 8080  #设置服务器端口号
  servlet:
    context-path: /  #设置上下文路径
    encoding:
      charset: UTF-8  #确保服务器在处理请求和响应时使用 UTF-8 编码
      force-response: true  #确保所有响应的 Content-Type 头中包含 charset=UTF-8
  tomcat:
    uri-encoding: UTF-8  #确保 Tomcat 在处理请求和响应时使用 UTF-8 编码  #设置关闭方式为优雅关闭
  shutdown: graceful  #设置关闭方式为优雅关闭

#spring相关配置
spring:
  profiles:
    active: dev  # 设置激活的环境

  application:
    name: data-detectives  #设置应用名称

  lifecycle:
    timeout-per-shutdown-phase: 60s  #设置优雅关闭超时时间（单位：秒）

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/data_detectives?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true
    #使用Jasypt进行加密
    username: ENC(c/7JDSJVHqIcgiqeXY+ykiVfm38Vzoq+hIeM/W8eaduqzYbn8crSO6Iiz/HoLuGe)
    password: ENC(b7bOi9M6Z68roRApF0ZWv98THdKsqzv43UFHNxWCq6FkTrt7DZIJTnFCCQwFy3fE)
    #设置数据库连接池
    # type: com.zaxxer.hikari.HikariDataSource # 指定 HikariCP 数据源
    type: com.alibaba.druid.pool.DruidDataSource  # 指定 Druid 数据源

    # HikariCP 连接池配置
    #    hikari:
    #      #连接池中允许的最大连接数。设置规则为：(CPU核心数 * 2) + 有峰值请求的线程数
    #      maximum-pool-size: 10
    #      #连接池中允许的最小空闲连接数。对于高并发场景，可以设置较低的值（如1-5）；对于低延迟要求的场景，可以设置为接近maximum-pool-size
    #      minimum-idle: 3

    # Druid 连接池配置
    druid:
      # 基础连接池配置
      initial-size: 1  #初始化连接数
      min-idle: 1  #最小空闲连接数
      max-active: 10  #最大连接数
      max-wait: 60000  #获取连接时最大等待时间（单位毫秒）

      # 连接池高级配置
      test-while-idle: true  #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      time-between-eviction-runs-millis: 60000  # 置间隔多久才进行一次检测，检测需要关闭的空闲连接（单位：亳秒）
      validation-query: SELECT 1
      min-evictable-idle-time-millis: 1800000  # 连接保持空闲而不被驱逐的最小时间（单位：毫秒）

      # 配置监控统计拦截器
      filters: stat,wall,slf4j

      # 配置 Filter
      filter:
        # 配置StatFilter 监控 SQL
        stat:
          enabled: true  # 开启 SQL 监控
          db-type: mysql  # 数据库类型
          log-slow-sql: true  # 记录慢 SQL
          slow-sql-millis: 2000  # 慢 SQL 阈值（2秒）
          merge-sql: true  # 合并相同 SQL 的统计
        # 配置 WallFilter 防火墙
        wall:
          enabled: true  # 启用 SQL 防火墙
          db-type: mysql  # 数据库类型
          config:
            multi-statement-allow: true  # 允许多条语句
            delete-allow: false  # 禁止删除语句
            drop-table-allow: false  # 禁止删除表
            # create-table-allow: true  # 允许创建表
        config:
          enabled: true  # 启用配置过滤器
        slf4j:
          enabled: true
          statement-log-error-enabled: true  # 记录 SQL 错误日志

      # 连接池监控配置

      # Web 监控配置（统计 Web 请求）
      web-stat-filter:
        enabled: true  # 开启 Web 监控
        url-pattern: /*  # 监控所有 URL
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"  # 排除静态资源
        session-stat-enable: true  # 统计 Session
        session-stat-max-count: 1000  # Session 最大数量

      # 监控面板配置
      stat-view-servlet:
        enabled: true  # 开启监控面板
        url-pattern: /druid/*  # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        login-username: ENC(oyGbgE3nhVhkSYMIS3TeSpInXUBufoUUGh+Dy3YC0FXLQlKzuZEIKXskOYaQpXoh)  # 登录账号
        login-password: ENC(BcWm2ZjWMCnxBwm9c0JtBj636HcIWxarrwdC5p7QOlb7pBaaFPwboFUfjLl5noH5)  # 登录密码
        reset-enable: false  # 不允许清空统计数据,重新计算
        allow: 127.0.0.1  # 允许访问的 IP
        deny: 192.168.1.100  # 拒绝访问的 IP（优先级高于 allow）

      # 监控的 AOP 切入点（指定 DAO 层包）
      aop-patterns: com.yubzhou.*

  mvc:
    throw-exception-if-no-handler-found: true  #当没有找到请求处理器时抛出异常

  web:
    resources:
      add-mappings: false  #关闭默认的静态资源路径映射
      # 设置静态资源路径
      static-locations:
        - classpath:/static/

  jackson:
    #以下配置只对Date类型序列化有效
    date-format: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"  #日期格式化字符串
    time-zone: UTC  #时区
    serialization:
      write-dates-as-timestamps: false  # 禁用时间戳，强制使用格式化字符串

  servlet:
    multipart:
      max-file-size: 10MB  #设置单个上传文件大小限制为 10MB
      max-request-size: 100MB  #设置请求体大小限制为 100MB

  data:
    redis:
      # redis://[username:password@]host:port[/database]
      # 省略用户名的url示例："redis://myuser:mypassword@redis-server:6379/1"
      # 特殊字符需要进行URL编码，如@符号需要编码为%40
      url: ENC(o6gD5cqZz0wB0Grdqy49CzBlKMjfBR3AsW4SE2h9C35sJTX0P1tARlwoulWFF6GfHL9Bvwuo8+YBnfKT7um2gO0yLn4sRcIcuNF2NueTNp0=)
      # host: ENC(gnCMA0LqIj7Y231FAfUW4lnwCWQ6PVWca7R4bJm1ZGrFW8ACUO170ZyHCzysIX+/)  #本地虚拟机的redis服务器地址
      # port: 6379  #redis服务器端口号
      # password: ENC(1E7ixpgXlUtaCjFWkU5FAIei4u+6EPvs/RBRFz9RiXJFjjcJxaWL7GtU8IueaDb0)  #redis密码（如果有）
      # database: 0  #redis数据库编号
      connect-timeout: 5s  #连接超时时间
      timeout: 5s  #读写超时时间
      lettuce:
        pool:
          max-active: 8  #连接池最大连接数（使用负值表示没有限制）
          max-idle: 8  #连接池最大空闲连接数
          min-idle: 2  #连接池最小空闲连接数

  # kafka 配置
  kafka:
    #Windows虚拟机的kafka服务
    bootstrap-servers: 192.168.238.100:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # value-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      #group-id: sse-group
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # earliest：当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费分区的记录
      # latest：当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的分区的记录
      # none：当各分区都存在已提交的offset时，从提交的offset开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        # 设置序列化可信包的路径
        #spring.json.trusted.packages: "*" # 信任所有包路径
        #spring.json.trusted.packages: "com.yubzhou.*" # 信任以指定前缀开头的包
        #spring.json.trusted.packages: com.yubzhou.model.dto # 明确包路径
        #spring.json.trusted.packages: com.yubzhou.model.dto,com.yubzhou.model.vo # 明确包路径,多个包用逗号分隔
        spring.json.trusted.packages: "com.yubzhou.*" # 信任以指定前缀开头的包
    listener:
      # 设置是否批处理，默认为single，即单条消息处理
      type: single
    template:
      # 设置默认的topic名字（调用sendDefault方法时，不指定topic时，使用该默认topic）
      default-topic: default-topic


#设置mybatis-plus
mybatis-plus:
  #指定 MyBatis 别名包扫描路径，用于给包中的类注册别名。注册后，在 Mapper 对应的 XML 文件中可以直接使用类名，无需使用全限定类名。
  type-aliases-package: com.yubzhou.model.po
  #对于 Maven 多模块项目，扫描路径应以 classpath*: 开头，以加载多个 JAR 包中的 XML 文件。
  mapper-locations: classpath*:/mapper/**/*.xml
  #配置类型处理器扫描路径
  type-handlers-package: com.yubzhou.handler
  configuration:
    # 开启自动映射驼峰命名规则
    map-underscore-to-camel-case: true
    #不开启二级缓存
    cache-enabled: false
    #对枚举常量自动进行映射
    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler
  global-config:
    # 全局配置
    db-config:
      id-type: AUTO # 主键自增策略：使用数据库自增 ID 作为主键
      insert-strategy: NOT_NULL # 插入策略：仅在字段值不为 NULL 时插入该字段
      update-strategy: NOT_NULL # 更新策略：仅在字段值不为 NULL 时更新该字段

      #设置mybatis-plus逻辑删除配置
      logic-delete-field: deleted # 全局逻辑删除字段名
      logic-delete-value: 1 # 逻辑已删除值
      logic-not-delete-value: 0 # 逻辑未删除值


##设置mybatis
#mybatis:
#  #指定mybatis的配置文件
#  mapper-locations: classpath*:mapper/**/*.xml
#  #注册该包下所有实体类别名
#  type-aliases-package: com.yubzhou.model.po
#  configuration:
#    #开启驼峰命名自动映射
#    map-underscore-to-camel-case: true
#    #开启延迟加载，前提为采取分步查询
#    lazy-loading-enabled: true
#    #日志输出使用slf4j
#    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
#
##设置分页插件
#pagehelper:
#  #指定数据库方言，PageHelper 会根据不同的数据库方言生成对应的分页 SQL
#  helper-dialect: mysql
#  #是否开启分页的合理化。合理化分页意味着：如果 pageNum 小于 1，自动查询第一页；如果 pageNum 大于总页数，自动查询最后一页
#  reasonable: true
#  #是否支持通过方法参数进行分页。如果设置为 true，可以通过方法参数直接传递分页参数，而不需要手动调用 PageHelper.startPage() 方法
#  support-methods-arguments: false
#  #为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
#  params: count=countSql
#  #是否将 offset 作为第一页。如果设置为 true，offset 会被当作第一页的偏移量。
#  offset-as-page-num: false
#  #rowBoundsWithCount 参数用于指定在使用 RowBounds 作为分页参数时，是否进行 count 查询。如果设置为 true，使用 RowBounds 分页时会执行 count 查询，以获取总记录数
#  row-bounds-with-count: false
#  #是否自动检测数据库方言。如果设置为 true，PageHelper 会自动检测当前数据库的方言，而不需要显式配置 helperDialect。
#  auto-runtime-dialect: false
#  #是否允许 pageSize 为 0。如果设置为 true，当 pageSize 为 0 时，不会进行分页查询，而是返回所有记录。
#  page-size-zero: true


#设置加密配置
jasypt:
  encryptor:
    # 从环境变量中获取加密密码
    password: ${JASYPT_ENCRYPTOR_PASSWORD}  # 加密器的密码
    # algorithm: PBEWithMD5AndDES  # 低加密强度的加密算法
    # PBEWithHMACSHA512AndAES_256 算法要求密钥长度至少为 32 字节（256 位）。这是因为 AES-256 加密算法需要一个 256 位的密钥。
    # 如果密钥长度不足，可能会导致加密操作失败，并抛出 EncryptionOperationNotPossibleException 异常。
    # 使用 PBEWithHMACSHA512AndAES_256 算法需要 JDK 1.9 或更高版本，或者安装 JCE 无限制强度策略文件。
    algorithm: PBEWithHMACSHA512AndAES_256  # 高加密强度的加密算法
    key-obtention-iterations: 1000  # 密钥生成的迭代次数，影响破解难度
    pool-size: 1  # 加密池的大小（如果使用了池化加密器）
    provider-name: SunJCE # 加密提供者的名称（如 JCE 提供者）
    salt-generator-classname: org.jasypt.salt.RandomSaltGenerator  # 盐生成器的类名，用于防止彩虹表攻击
    iv-generator-classname: org.jasypt.iv.RandomIvGenerator  # 初始向量生成器的类名
    string-output-type: base64  # 加密字符串的输出类型
    property:
      prefix: ENC(  # 标识为加密属性的前缀
      suffix: )  # 标识为加密属性的后缀


##设置actuator监控配置
#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*"  # 暴露所有端点（生产环境建议按需配置）
#      base-path: /monitor  # 自定义端点路径（默认是/actuator）
#  endpoint:
#    health:
#      show-details: always  # 显示健康检查详情
#
## 设置actuator自定义info信息（可选）
#info:
#  app:
#    name: "My Spring Boot App"
#    version: "1.0.0"
#    description: "Actuator Demo Application"


# 自定义配置
myapp:
  jwt:
    secret-key: ENC(byFhK606hAlLQi+gNcXQApe8F7ksddA+G0dAnfKaiBaYVviFlGCKeOyAhk0Nf+TFfSbUljwVhkLIuYi52bgmZAgVL3mlW96xAXeg4Nxwaf8=) # JWT 密钥
    # 自定义时间字母单位：y=年，M=月，w=周，d=天，h=小时，m=分钟，s=秒，ms=毫秒
    access-token-expiration-time: 30m # 访问 token 过期时间 为 30 分钟
    refresh-token-expiration-time: 5d # 刷新 token 过期时间 为 5 天
    token-prefix: "Bearer " # token 前缀
    token-header: "Authorization" # token 放入请求头的名称
  keystore:
    path: ${user.home}\.myapp_security\keystore.jks  # 密钥库路径
    # 密码库密码
    password: ENC(kiyZY3Eo97agDzi0jqOAKtx8KjhjBQri6chDjSHBTWrvdX6nt4M3E6ozJWLCPwqXLnze/OEcBsV7rxdKcI89VYJf2NO4pkz9cQOjyI42Et0=)

# 自定义配置
aliyun:
  sms:
    access-key-id: ENC(GoxRp8SAee3zMko2NsYjZdizJRU63TPcNU9wnoWRmO9XiJ5aaUcnfdZojW50ACnDpy9Atx3dPSS9hwT8EyZ+Kg==)
    access-key-secret: ENC(q5VIMgyT/1aAnO3ON6mykJpgsXFk2GMXLqlVW6oUa+f+q5nIJBqP3QoZhoD3sIWnWC/vISIw53Q+rikvD6kiew==)
    sign-name: NFact平台
    # 短信验证码模板code
    login-template-code: SMS_480095164
    register-template-code: SMS_480250172
    # 域名（一般默认） Endpoint 请参考 https://api.aliyun.com/product/Dysmsapi
    endpoint: dysmsapi.aliyuncs.com

# 自定义配置，用于配置文件上传路径和访问路径
file-upload:
  image:
    # 配置图片上传路径
    upload-dir: ./uploads/images # 与项目目录同级的 uploads/images 目录
    # 配置图片访问路径
    access-url: /uploads/images/ # 图片访问路径
  json:
    # 配置json上传路径
    upload-dir: ./uploads/json # 与项目目录同级的 uploads/json 目录
    # 配置json访问路径
    access-url: /uploads/json/ # json访问路径


# 自定义配置，用于系统信息配置
system-info:
  # 系统可用CPU核数
  #available-processors: 8
  available-processors: ${systemInfo.availableProcessors:8}  # 系统可用CPU核数